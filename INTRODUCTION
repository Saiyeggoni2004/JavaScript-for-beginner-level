JavaScript is a highly popular programming language used for development in the tech industry for over 11-12 years. It is a language that computers and machines understand, allowing users to give them instructions to perform tasks. 
Just as people use different languages to interact, programming languages enable communication with computers. JavaScript helps you use your logic to tell the computer what to do, whether it's a simple calculation like 1+2 or generating an entire website.

When you write JavaScript code, it acts as a set of instructions. The computer takes these instructions as input, processes them, and then provides an output, which can range from a simple numerical answer to a complex website.

**Running JavaScript Code**
There are several ways to run JavaScript code and obtain an output:

1.  **Browser Console**
    The simplest way to run JavaScript is directly within your web browser's console. Browsers like Chrome, Firefox, and Safari have this feature. For example, in Chrome, you can right-click on any webpage, select "Inspect," and then navigate to the "Console" tab.

    *   **Example**: You can type `alert("My College")` into the console and press Enter. This will create a pop-up message on your screen saying "My College". Similarly, you could type `alert("Hello JS")` to get a "Hello JS" pop-up.
    *   **Limitations**: Code written directly in the browser console is temporary. It will disappear if you refresh the browser tab. While useful for learning, it's not practical for building larger projects.

2.  **Code Editor**
    For more permanent and extensive code, JavaScript is typically written in a code editor. 
    A code editor acts like a digital notebook for coders. Many options are available, such as Vim and Sublime, but **VS Code (Visual Studio Code)** is highly recommended due to its popularity, being free, and its ability to handle multiple programming languages like Java, C++, C, and Python. VS Code is built by Microsoft.

    To use VS Code, you would:
    *   **Download and Install**: Search for "download VS Code" online and choose the correct version for your operating system (Windows, macOS, Linux).
    *   **Create a JavaScript File**: Open VS Code, create a new file (e.g., a text file), and save it with a `.js` extension (e.g., `first.js`). The `.js` extension indicates that the file contains JavaScript code.
    *   **Connect to an HTML File**: To see the output of your JavaScript code in a browser from VS Code, you need to link your `.js` file to an HTML file. HTML defines the structure of a webpage.
        *   Create an HTML file (e.g., `index.html`) in the same folder as your JavaScript file.
        *   Use VS Code's boilerplate code feature (type `Shift + !` and press Enter) to generate a basic HTML structure.
        *   Add a `<script>` tag within the HTML `<body>` section, linking to your JavaScript file using the `src` attribute. For example: `<script src="first.js"></script>`.
        *   Save the HTML file and open it in your browser by double-clicking it.
        *   Now, by inspecting the browser console, you will see the output of your JavaScript code written in VS Code. This creates a permanent link, and changes in your `.js` file will reflect in the browser upon refreshing.

**`console.log()`**
`console.log()` is a fundamental command in JavaScript used to print anything to the console. The console is the part of the browser where JavaScript runs.

*   **Syntax**: `console.log("Your Message")` or `console.log(variableName)`.
*   The message or variable content is placed inside parentheses `()`. Textual messages (strings) must be enclosed in double `""` or single `''` quotes. A semicolon `;` is generally used at the end of a statement, similar to a full stop, though JavaScript often runs without it in a browser console.
*   **Example**:
    *   `console.log("My College");` will print "My College" to the console.
    *   `console.log("I Love JS");` will print "I Love JS".
    *   `console.log("Shradha K");` will print "Shradha K".
    *   Each `console.log()` statement prints its output on a new line.

**Variables**
Variables are like containers for storing data in programming. In memory, they represent named locations where data values are stored. Just as an address refers to a house containing a resident, a variable's name refers to a memory location containing a value. The value stored in a variable can change or "vary" over time, hence the term "variable".

For example, on an e-commerce website, data like product price, offers, and delivery dates are stored in variables because these values can change.

*   **Declaring Variables**:
    You can declare variables directly in the console or within your `.js` file.
    *   **Example (Console)**:
        *   `age = 24;` (stores the number 24 in a variable named `age`).
        *   `name = "Tony Stark";` (stores the string "Tony Stark" in a variable named `name`).
        *   Once declared, typing `age` or `name` in the console will return their stored values.
    *   **Example (File)**:
        ```javascript
        // In your first.js file
        console.log("Welcome to My College"); // Example from earlier
        let fullName = "Tony Stark";
        console.log(fullName); // Prints "Tony Stark"
        let age = 24;
        console.log(age); // Prints 24
        let price = 99.99;
        console.log(price); // Prints 99.99
        ```
        Note that when printing the value of a variable, you do not use quotes around the variable name in `console.log()`.

*   **Variable Naming Rules and Conventions**:
    While you can choose arbitrary names like `x` or `a`, it's good practice to use meaningful names (e.g., `age`, `price`, `radius`, `fullName`).

    **Rules:**
    1.  **Case Sensitivity**: Variable names are case-sensitive. `fullName` and `FullName` are considered two different variables.
    2.  **Allowed Characters**: Only letters (A-Z, a-z), digits (0-9), underscores (`_`), and dollar signs (`$`) are allowed. Spaces are not allowed.
        *   **Example**: `full_Name` or `fullName123` are valid; `full Name` or `full@Name` are invalid.
    3.  **First Character**: The first character of a variable name must be a letter, an underscore (`_`), or a dollar sign (`$`). It cannot be a digit.
        *   **Example**: `_fullName` or `$fullName` are valid; `123fullName` is invalid.
    4.  **Reserved Words**: You cannot use JavaScript's reserved keywords (words with fixed meanings in the language) as variable names.
        *   **Example**: `console` is a reserved word (when written in lowercase `c`). Attempting to use `console = "My College"` would result in an error. However, `Console` (with a capital C) is not reserved and could be used, but it's generally not recommended to avoid confusion.

    **Convention (Camel Case)**:
    While not a strict rule, it's a widely adopted convention to use **camel case** for variable names.
    *   The first letter of the first word is lowercase, and the first letter of subsequent words is uppercase.
    *   **Example**: `fullName`, `isFollow`, `totalPrice`. Other cases like snake case (`full_name`) or pascal case (`FullName`) are generally not preferred in JavaScript.

*   **Variable Declaration Keywords (`var`, `let`, `const`)**:
    When declaring variables, you should always use a keyword. JavaScript offers three keywords: `var`, `let`, and `const`.

    1.  **`var` (Old Way)**:
        *   `var` was the primary way to declare variables before 2015.
        *   **Problem**: Variables declared with `var` can be **re-declared** multiple times in the same scope without an error. This can lead to confusion and bugs in larger codebases.
        *   **Example**:
            ```javascript
            var age = 24;
            var age = 59; // Re-declaration, no error
            var age = 86; // Re-declaration, no error
            console.log(age); // Prints 86 (the last assigned value)
            ```
        *   **Recommendation**: Do not use `var` in modern JavaScript.

    2.  **`let` (Modern Way)**:
        *   Introduced in ES6 (ECMAScript 6) in 2015 as part of modern JavaScript standards.
        *   **Allows Updating**: Variables declared with `let` can have their values updated.
        *   **No Re-declaration**: Variables declared with `let` **cannot be re-declared** within the same scope. Attempting to do so will result in an error.
        *   **Block Scope**: `let` variables have **block scope**, meaning they are only accessible within the curly braces `{}` (a "block") where they are defined.
        *   **Example**:
            ```javascript
            let age = 24;
            age = 59; // Valid: updates the value
            age = 86; // Valid: updates the value
            console.log(age); // Prints 86

            // let age = 100; // This would cause an error: "Cannot redeclare block-scoped variable 'age'."

            { // Start of a new block
                let a = 5;
                console.log(a); // Prints 5
            }
            { // Start of another new block
                let a = 10; // This is a different 'a' because it's in a new block
                console.log(a); // Prints 10
            }
            ```
        *   **Default Value**: If a `let` variable is declared but not assigned a value, its default value is `undefined`.
            *   **Example**: `let a; console.log(a);` would print `undefined`.

    3.  **`const` (Modern Way for Constants)**:
        *   Also introduced in ES6.
        *   **No Re-declaration and No Updating**: Variables declared with `const` **cannot be re-declared** and **cannot be updated** once assigned a value. Their value is fixed.
        *   **Block Scope**: Like `let`, `const` variables also have **block scope**.
        *   **Must Be Initialised**: A `const` variable must be assigned an initial value when declared; otherwise, it will result in an error.
            *   **Example**: `const a;` would cause an error: "Missing initializer in const declaration".
        *   **Example**:
            ```javascript
            const PI = 3.14;
            console.log(PI); // Prints 3.14

            // PI = 3.14159; // This would cause an error: "Assignment to constant variable."
            ```
        *   **Convention**: Constants that are used throughout the code are often written in `CAPITAL_LETTERS`.
        *   **Preference**: Generally, `const` is preferred because many variables do not frequently change their values. Use `let` only when you know the variable's value will be updated.


       
